
AutoSys2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000013c  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000c6  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f7  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00000828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018d  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000225  00000000  00000000  00000acd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	be c0       	rjmp	.+380    	; 0x19a <__vector_7>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	e3 c0       	rjmp	.+454    	; 0x1ec <__vector_9>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 30       	cpi	r26, 0x02	; 2
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	62 d0       	rcall	.+196    	; 0x176 <main>
  b2:	23 c1       	rjmp	.+582    	; 0x2fa <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <initGPIO>:
volatile unsigned char buttons;		// This registers holds a copy of PINC when an external interrupt 6 has occurred.
volatile unsigned char bToggle = 0;	// This registers is a boolean that is set when an interrupt 6 occurs and cleared when serviced in the code.
//These registers is available outside of the main loop (i.e., to the interrupt handlers)

int initGPIO(void)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	//Set up input output direction on Port C and G
	DDRB |= (1<<DB_LED);	// Set the display backlight's IO pin an an output. Leave other bits as they were.
  be:	84 e2       	ldi	r24, 0x24	; 36
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	24 e2       	ldi	r18, 0x24	; 36
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	20 68       	ori	r18, 0x80	; 128
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	DDRC = 0b00000111;		// Set the direction of the IO pins on Port C to output on the 3 least significant bits and input on the 5 higher ones. 5 buttons and 3 LEDs.
  d0:	87 e2       	ldi	r24, 0x27	; 39
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	27 e0       	ldi	r18, 0x07	; 7
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	DDRG |= 0b00000011;		// set the direction of the IO pins on Port G's lower 2 bytes as output (LEDs 1 & 2). Leave the other bits as they were.
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	23 e3       	ldi	r18, 0x33	; 51
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	23 60       	ori	r18, 0x03	; 3
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	return(0);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <initExtInt>:

int initExtInt(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	//Set up external Interrupts
	// The five Switches are ORed to Pin PE6 which is alternatively Int6
	EICRB |= (0<<ISC61) | (1<<ISC60);  //Any logical change to INT6 generates an interrupt
  fe:	8a e6       	ldi	r24, 0x6A	; 106
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2a e6       	ldi	r18, 0x6A	; 106
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 61       	ori	r18, 0x10	; 16
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	EIMSK |= (1<<INTF6);
 110:	8d e3       	ldi	r24, 0x3D	; 61
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2d e3       	ldi	r18, 0x3D	; 61
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	20 64       	ori	r18, 0x40	; 64
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	return(6);
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	90 e0       	ldi	r25, 0x00	; 0
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <initTimer2>:


int initTimer2()
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	/// Set up an internal Interrupt that will occur every 5 milliseconds.
	/// It uses the Timer Counter 2 in CTC mode with a pre-scaler of 256 and a value of 155 (it should be 155.25).
	// 
	TCCR2A = (1<<WGM21); // | (0<<WGM20);  //CTC mode
 134:	80 eb       	ldi	r24, 0xB0	; 176
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	28 e0       	ldi	r18, 0x08	; 8
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	//TCCR2A |= (0<<COM2A1) | (0<<COM2A0); // Mormal port operation, OC2A is disconnected.
	TCCR2A |= (1<<CS22) | (1<<CS21); //| (0<<CS20); /// Divide source frequency source by 256.
 13e:	80 eb       	ldi	r24, 0xB0	; 176
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	20 eb       	ldi	r18, 0xB0	; 176
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	26 60       	ori	r18, 0x06	; 6
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	TCNT2 = 0;	/// Make sure the timer counter is set to 0.
 150:	82 eb       	ldi	r24, 0xB2	; 178
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	10 82       	st	Z, r1
	OCR2A = 155;
 158:	83 eb       	ldi	r24, 0xB3	; 179
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	2b e9       	ldi	r18, 0x9B	; 155
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCF2A); // Interrupt flag register to enable output compare.
 162:	80 e7       	ldi	r24, 0x70	; 112
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	22 e0       	ldi	r18, 0x02	; 2
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
	return(2);
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	90 e0       	ldi	r25, 0x00	; 0
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <main>:

int main(void)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	1f 92       	push	r1
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp = 0x0F;		// Allocate memory for temp. It is initialized to 15 for demonstration purposes only.
 180:	8f e0       	ldi	r24, 0x0F	; 15
 182:	89 83       	std	Y+1, r24	; 0x01
	
	temp = initGPIO();				// Set up the data direction register for both ports C and G
 184:	98 df       	rcall	.-208    	; 0xb6 <initGPIO>
 186:	89 83       	std	Y+1, r24	; 0x01
	temp = initExtInt();			// Setup external interrupts
 188:	b6 df       	rcall	.-148    	; 0xf6 <initExtInt>
 18a:	89 83       	std	Y+1, r24	; 0x01
	temp = initTimer2();			// Setup 5ms internal interrupt
 18c:	cf df       	rcall	.-98     	; 0x12c <initTimer2>
 18e:	89 83       	std	Y+1, r24	; 0x01
	sei();							// Set Global Interrupts
 190:	78 94       	sei
	
	while(1)
	{
	temp++;
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	89 83       	std	Y+1, r24	; 0x01
	}			
 198:	fc cf       	rjmp	.-8      	; 0x192 <main+0x1c>

0000019a <__vector_7>:
}

SIGNAL(SIG_INTERRUPT6)  //Execute the following code if an INT6 interrupt has been generated. It is kept short.
{
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1aa:	0f 92       	push	r0
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	bToggle = 1;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	buttons = PINC;
 1c2:	86 e2       	ldi	r24, 0x26	; 38
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
 1ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buttons>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1e0:	0f 90       	pop	r0
 1e2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_9>:



SIGNAL(SIG_OUTPUT_COMPARE2)
{	
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1fc:	0f 92       	push	r0
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62

	if (bToggle)
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 216:	88 23       	and	r24, r24
 218:	09 f4       	brne	.+2      	; 0x21c <__vector_9+0x30>
 21a:	5e c0       	rjmp	.+188    	; 0x2d8 <__vector_9+0xec>
	{
		switch(buttons & 0b11111000)
 21c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <buttons>
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	88 7f       	andi	r24, 0xF8	; 248
 226:	99 27       	eor	r25, r25
 228:	80 32       	cpi	r24, 0x20	; 32
 22a:	91 05       	cpc	r25, r1
 22c:	19 f1       	breq	.+70     	; 0x274 <__vector_9+0x88>
 22e:	81 32       	cpi	r24, 0x21	; 33
 230:	91 05       	cpc	r25, r1
 232:	34 f4       	brge	.+12     	; 0x240 <__vector_9+0x54>
 234:	88 30       	cpi	r24, 0x08	; 8
 236:	91 05       	cpc	r25, r1
 238:	89 f1       	breq	.+98     	; 0x29c <__vector_9+0xb0>
 23a:	40 97       	sbiw	r24, 0x10	; 16
 23c:	29 f1       	breq	.+74     	; 0x288 <__vector_9+0x9c>
 23e:	38 c0       	rjmp	.+112    	; 0x2b0 <__vector_9+0xc4>
 240:	80 34       	cpi	r24, 0x40	; 64
 242:	91 05       	cpc	r25, r1
 244:	69 f0       	breq	.+26     	; 0x260 <__vector_9+0x74>
 246:	80 38       	cpi	r24, 0x80	; 128
 248:	91 05       	cpc	r25, r1
 24a:	91 f5       	brne	.+100    	; 0x2b0 <__vector_9+0xc4>
		{
			case 0b10000000:			//S5 center button
			PORTC |= 0b00000100;	//Turn on Led5 if S5 is on
 24c:	88 e2       	ldi	r24, 0x28	; 40
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	28 e2       	ldi	r18, 0x28	; 40
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	24 60       	ori	r18, 0x04	; 4
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
			break;
 25e:	3a c0       	rjmp	.+116    	; 0x2d4 <__vector_9+0xe8>
			case 0b01000000:			//S4  upper button
			PORTC |= 0b00000010;	 //Turn on Led4 if S4 is on
 260:	88 e2       	ldi	r24, 0x28	; 40
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	28 e2       	ldi	r18, 0x28	; 40
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	f9 01       	movw	r30, r18
 26a:	20 81       	ld	r18, Z
 26c:	22 60       	ori	r18, 0x02	; 2
 26e:	fc 01       	movw	r30, r24
 270:	20 83       	st	Z, r18
			break;
 272:	30 c0       	rjmp	.+96     	; 0x2d4 <__vector_9+0xe8>
			case 0b00100000:			//S3 left button
			PORTC |= 0b00000001;	//Turn on Led3 if S3 is on
 274:	88 e2       	ldi	r24, 0x28	; 40
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	28 e2       	ldi	r18, 0x28	; 40
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	f9 01       	movw	r30, r18
 27e:	20 81       	ld	r18, Z
 280:	21 60       	ori	r18, 0x01	; 1
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
			break;
 286:	26 c0       	rjmp	.+76     	; 0x2d4 <__vector_9+0xe8>
			case 0b00010000:			//S2 lower button
			PORTG |= 0b00000010;	//Turn on Led2 if S2 is on
 288:	84 e3       	ldi	r24, 0x34	; 52
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	24 e3       	ldi	r18, 0x34	; 52
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	22 60       	ori	r18, 0x02	; 2
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
			break;
 29a:	1c c0       	rjmp	.+56     	; 0x2d4 <__vector_9+0xe8>
			case 0b00001000:			//S1 right button
			PORTG |= 0b00000001;	//Turn on Led1 if S1 is on
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	24 e3       	ldi	r18, 0x34	; 52
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	21 60       	ori	r18, 0x01	; 1
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
			break;
 2ae:	12 c0       	rjmp	.+36     	; 0x2d4 <__vector_9+0xe8>
			default:
			PORTC &= 0b11111000;	//Turn off Port C LEDs
 2b0:	88 e2       	ldi	r24, 0x28	; 40
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	28 e2       	ldi	r18, 0x28	; 40
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	f9 01       	movw	r30, r18
 2ba:	20 81       	ld	r18, Z
 2bc:	28 7f       	andi	r18, 0xF8	; 248
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
			PORTG &= 0x11111100;	//Turn off Port G LEDs
 2c2:	84 e3       	ldi	r24, 0x34	; 52
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	84 e3       	ldi	r24, 0x34	; 52
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	10 82       	st	Z, r1
			break;
 2d2:	00 00       	nop
		}
		bToggle = 0;
 2d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
   }
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2ee:	0f 90       	pop	r0
 2f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>
