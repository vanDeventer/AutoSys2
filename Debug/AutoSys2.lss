
AutoSys2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000165  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000105  00000000  00000000  00000471  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001cf  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018e  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000113  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
   a:	00 00       	nop
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
   e:	00 00       	nop
  10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
  12:	00 00       	nop
  14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
  16:	00 00       	nop
  18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	41 c0       	rjmp	.+130    	; 0xa4 <__bad_interrupt>
  22:	00 00       	nop
  24:	3f c0       	rjmp	.+126    	; 0xa4 <__bad_interrupt>
  26:	00 00       	nop
  28:	3d c0       	rjmp	.+122    	; 0xa4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3b c0       	rjmp	.+118    	; 0xa4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	39 c0       	rjmp	.+114    	; 0xa4 <__bad_interrupt>
  32:	00 00       	nop
  34:	37 c0       	rjmp	.+110    	; 0xa4 <__bad_interrupt>
  36:	00 00       	nop
  38:	35 c0       	rjmp	.+106    	; 0xa4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	33 c0       	rjmp	.+102    	; 0xa4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	31 c0       	rjmp	.+98     	; 0xa4 <__bad_interrupt>
  42:	00 00       	nop
  44:	2f c0       	rjmp	.+94     	; 0xa4 <__bad_interrupt>
  46:	00 00       	nop
  48:	2d c0       	rjmp	.+90     	; 0xa4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2b c0       	rjmp	.+86     	; 0xa4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	29 c0       	rjmp	.+82     	; 0xa4 <__bad_interrupt>
  52:	00 00       	nop
  54:	27 c0       	rjmp	.+78     	; 0xa4 <__bad_interrupt>
  56:	00 00       	nop
  58:	25 c0       	rjmp	.+74     	; 0xa4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	23 c0       	rjmp	.+70     	; 0xa4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	21 c0       	rjmp	.+66     	; 0xa4 <__bad_interrupt>
  62:	00 00       	nop
  64:	1f c0       	rjmp	.+62     	; 0xa4 <__bad_interrupt>
  66:	00 00       	nop
  68:	1d c0       	rjmp	.+58     	; 0xa4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1b c0       	rjmp	.+54     	; 0xa4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	19 c0       	rjmp	.+50     	; 0xa4 <__bad_interrupt>
  72:	00 00       	nop
  74:	17 c0       	rjmp	.+46     	; 0xa4 <__bad_interrupt>
  76:	00 00       	nop
  78:	15 c0       	rjmp	.+42     	; 0xa4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	13 c0       	rjmp	.+38     	; 0xa4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	11 c0       	rjmp	.+34     	; 0xa4 <__bad_interrupt>
  82:	00 00       	nop
  84:	0f c0       	rjmp	.+30     	; 0xa4 <__bad_interrupt>
  86:	00 00       	nop
  88:	0d c0       	rjmp	.+26     	; 0xa4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	09 c0       	rjmp	.+18     	; 0xa4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61
  a0:	5d d0       	rcall	.+186    	; 0x15c <main>
  a2:	a8 c0       	rjmp	.+336    	; 0x1f4 <_exit>

000000a4 <__bad_interrupt>:
  a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <delay_ms>:

/*! \brief Millisecond delay
 * \param ms the delay in milliseconds
 */
void delay_ms(unsigned char ms)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <delay_ms+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <delay_ms+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	8d 83       	std	Y+5, r24	; 0x05
   unsigned short delay_count = F_CPU / 4000;
  b6:	86 e6       	ldi	r24, 0x66	; 102
  b8:	9e e0       	ldi	r25, 0x0E	; 14
  ba:	9a 83       	std	Y+2, r25	; 0x02
  bc:	89 83       	std	Y+1, r24	; 0x01
#ifdef __GNUC__
    unsigned short cnt;
    __asm__ __volatile__ ("\n"
  be:	4d 81       	ldd	r20, Y+5	; 0x05
  c0:	29 81       	ldd	r18, Y+1	; 0x01
  c2:	3a 81       	ldd	r19, Y+2	; 0x02

000000c4 <L_dl124>:
  c4:	82 2f       	mov	r24, r18
  c6:	93 2f       	mov	r25, r19

000000c8 <L_dl224>:
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <L_dl224>
  cc:	4a 95       	dec	r20
  ce:	d1 f7       	brne	.-12     	; 0xc4 <L_dl124>
  d0:	9c 83       	std	Y+4, r25	; 0x04
  d2:	8b 83       	std	Y+3, r24	; 0x03
    while (ms--) {
        delay_cnt_buffer = delay_cnt;
        while (delay_cnt_buffer--);
    }
#endif
}
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <delay_s>:

/*! \brief Seconds delay
 * \param s delay in seconds
 */
void delay_s(unsigned char s)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	00 d0       	rcall	.+0      	; 0xea <delay_s+0x6>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char i=0;i<s;i++)
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	0b c0       	rjmp	.+22     	; 0x10a <delay_s+0x26>
	{
		delay_ms(250);
  f4:	8a ef       	ldi	r24, 0xFA	; 250
  f6:	d7 df       	rcall	.-82     	; 0xa6 <delay_ms>
		delay_ms(250);
  f8:	8a ef       	ldi	r24, 0xFA	; 250
  fa:	d5 df       	rcall	.-86     	; 0xa6 <delay_ms>
		delay_ms(250);
  fc:	8a ef       	ldi	r24, 0xFA	; 250
  fe:	d3 df       	rcall	.-90     	; 0xa6 <delay_ms>
		delay_ms(250);
 100:	8a ef       	ldi	r24, 0xFA	; 250
 102:	d1 df       	rcall	.-94     	; 0xa6 <delay_ms>
/*! \brief Seconds delay
 * \param s delay in seconds
 */
void delay_s(unsigned char s)
{
	for (unsigned char i=0;i<s;i++)
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	99 81       	ldd	r25, Y+1	; 0x01
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	98 17       	cp	r25, r24
 110:	88 f3       	brcs	.-30     	; 0xf4 <delay_s+0x10>
		delay_ms(250);
		delay_ms(250);
		delay_ms(250);
		delay_ms(250);
	}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <initGPIO>:
#include <avr/io.h>	// Standard IO header file
#include "delay.h"


int initGPIO(void)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	//Set up input output direction on Port C and G
	DDRB |= (1<<DB_LED);	// Set the display backlight's IO pin an an output. Leave other bits as they were.
 124:	84 e2       	ldi	r24, 0x24	; 36
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	24 e2       	ldi	r18, 0x24	; 36
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	20 68       	ori	r18, 0x80	; 128
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	DDRC = 0b00000111;		// Set the direction of the IO pins on Port C to output on the 3 least significant bits and input on the 5 higher ones. 5 buttons and 3 LEDs.
 136:	87 e2       	ldi	r24, 0x27	; 39
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	27 e0       	ldi	r18, 0x07	; 7
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	DDRG |= 0b00000011;		// set the direction of the IO pins on Port G's lower 2 bytes as output (LEDs 1 & 2). Leave the other bits as they were.
 140:	83 e3       	ldi	r24, 0x33	; 51
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	23 e3       	ldi	r18, 0x33	; 51
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	23 60       	ori	r18, 0x03	; 3
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	return(0);
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:



int main(void)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	1f 92       	push	r1
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp = 0xFF;		//Allocate memory for temp. It is initialized to 255 for demonstration purposes only.
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	89 83       	std	Y+1, r24	; 0x01
	
	temp = initGPIO();				//Set up the data direction register for both ports C and G
 16a:	d8 df       	rcall	.-80     	; 0x11c <initGPIO>
 16c:	89 83       	std	Y+1, r24	; 0x01
	
	while(1)
	{
		PORTC = 0b000000001;	//Tun on Led3
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
		PORTG &= 0x00;			//Turn off all Leds on PortG
 178:	84 e3       	ldi	r24, 0x34	; 52
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	80 81       	ld	r24, Z
 180:	84 e3       	ldi	r24, 0x34	; 52
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	10 82       	st	Z, r1
		delay_s(1);				//Wait 1 second
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	ac df       	rcall	.-168    	; 0xe4 <delay_s>
		
		PORTC = 0b00000010;		//Turn on Led4 on PortC
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	22 e0       	ldi	r18, 0x02	; 2
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
		PORTG = 0x02;			//Turn on Led2 on PortG
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	22 e0       	ldi	r18, 0x02	; 2
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
		delay_ms(255);			//Wait 255 ms
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	81 df       	rcall	.-254    	; 0xa6 <delay_ms>
		
		PORTC = 0b00000100;		//Turn on Led5 on PortC
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	24 e0       	ldi	r18, 0x04	; 4
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
		PORTG = 0x01;			//Turn on Led1 on PortG
 1ae:	84 e3       	ldi	r24, 0x34	; 52
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
		delay_ms(255);			//Wait 255 ms
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	75 df       	rcall	.-278    	; 0xa6 <delay_ms>
		delay_ms(255);			//Wait 255 ms
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	73 df       	rcall	.-282    	; 0xa6 <delay_ms>
		
		if (PINB & (1<<DB_LED))		// If the display backlight is on, then 
 1c0:	83 e2       	ldi	r24, 0x23	; 35
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	fc 01       	movw	r30, r24
 1c6:	80 81       	ld	r24, Z
 1c8:	88 23       	and	r24, r24
 1ca:	54 f4       	brge	.+20     	; 0x1e0 <main+0x84>
		{
			PORTB &= ~(1<<DB_LED);	// Turn off the display backlight.
 1cc:	85 e2       	ldi	r24, 0x25	; 37
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	25 e2       	ldi	r18, 0x25	; 37
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	2f 77       	andi	r18, 0x7F	; 127
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <main+0x96>
		} 
		else
		{
			PORTB |= (1<<DB_LED);	// Turn on turn display backlight.
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	25 e2       	ldi	r18, 0x25	; 37
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	20 68       	ori	r18, 0x80	; 128
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
		}
	}
 1f2:	bd cf       	rjmp	.-134    	; 0x16e <main+0x12>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
