
AutoSys2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000bc8  00000c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010c  0080010c  00000c68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b4  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000358  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f3  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000020e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000360  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ef  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000303b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8d c0       	rjmp	.+282    	; 0x11c <__ctors_end>
   2:	00 00       	nop
   4:	a8 c0       	rjmp	.+336    	; 0x156 <__bad_interrupt>
   6:	00 00       	nop
   8:	a6 c0       	rjmp	.+332    	; 0x156 <__bad_interrupt>
   a:	00 00       	nop
   c:	a4 c0       	rjmp	.+328    	; 0x156 <__bad_interrupt>
   e:	00 00       	nop
  10:	a2 c0       	rjmp	.+324    	; 0x156 <__bad_interrupt>
  12:	00 00       	nop
  14:	a0 c0       	rjmp	.+320    	; 0x156 <__bad_interrupt>
  16:	00 00       	nop
  18:	9e c0       	rjmp	.+316    	; 0x156 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b4 c4       	rjmp	.+2408   	; 0x986 <__vector_7>
  1e:	00 00       	nop
  20:	9a c0       	rjmp	.+308    	; 0x156 <__bad_interrupt>
  22:	00 00       	nop
  24:	da c4       	rjmp	.+2484   	; 0x9da <__vector_9>
  26:	00 00       	nop
  28:	96 c0       	rjmp	.+300    	; 0x156 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	94 c0       	rjmp	.+296    	; 0x156 <__bad_interrupt>
  2e:	00 00       	nop
  30:	92 c0       	rjmp	.+292    	; 0x156 <__bad_interrupt>
  32:	00 00       	nop
  34:	90 c0       	rjmp	.+288    	; 0x156 <__bad_interrupt>
  36:	00 00       	nop
  38:	8e c0       	rjmp	.+284    	; 0x156 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8c c0       	rjmp	.+280    	; 0x156 <__bad_interrupt>
  3e:	00 00       	nop
  40:	8a c0       	rjmp	.+276    	; 0x156 <__bad_interrupt>
  42:	00 00       	nop
  44:	88 c0       	rjmp	.+272    	; 0x156 <__bad_interrupt>
  46:	00 00       	nop
  48:	86 c0       	rjmp	.+268    	; 0x156 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	84 c0       	rjmp	.+264    	; 0x156 <__bad_interrupt>
  4e:	00 00       	nop
  50:	82 c0       	rjmp	.+260    	; 0x156 <__bad_interrupt>
  52:	00 00       	nop
  54:	80 c0       	rjmp	.+256    	; 0x156 <__bad_interrupt>
  56:	00 00       	nop
  58:	7e c0       	rjmp	.+252    	; 0x156 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7c c0       	rjmp	.+248    	; 0x156 <__bad_interrupt>
  5e:	00 00       	nop
  60:	7a c0       	rjmp	.+244    	; 0x156 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c5       	rjmp	.+2638   	; 0xab4 <__vector_25>
  66:	00 00       	nop
  68:	76 c0       	rjmp	.+236    	; 0x156 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	74 c0       	rjmp	.+232    	; 0x156 <__bad_interrupt>
  6e:	00 00       	nop
  70:	72 c0       	rjmp	.+228    	; 0x156 <__bad_interrupt>
  72:	00 00       	nop
  74:	70 c0       	rjmp	.+224    	; 0x156 <__bad_interrupt>
  76:	00 00       	nop
  78:	6e c0       	rjmp	.+220    	; 0x156 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6c c0       	rjmp	.+216    	; 0x156 <__bad_interrupt>
  7e:	00 00       	nop
  80:	6a c0       	rjmp	.+212    	; 0x156 <__bad_interrupt>
  82:	00 00       	nop
  84:	68 c0       	rjmp	.+208    	; 0x156 <__bad_interrupt>
  86:	00 00       	nop
  88:	66 c0       	rjmp	.+204    	; 0x156 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	64 c0       	rjmp	.+200    	; 0x156 <__bad_interrupt>
  8e:	00 00       	nop
  90:	62 c0       	rjmp	.+196    	; 0x156 <__bad_interrupt>
	...

00000094 <LcdCustomChar>:
  94:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  a4:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  b4:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  c4:	03 07 0f 1f 0f 07 03 00 00 1f 1f 1f 1f 1f 1f 00     ................
  d4:	1b 1b 1b 1b 1b 1b 1b 00 18 1c 1e 1f 1e 1c 18 00     ................
  e4:	00 04 04 0e 0e 1f 1f 00 00 1f 1f 0e 0e 04 04 00     ................
	...
  fc:	00 0e 19 15 13 0e 00 00 00 0e 15 15 15 0e 00 00     ................
 10c:	00 0e 13 15 19 0e 00 00 00 0e 11 1f 11 0e 00 00     ................

0000011c <__ctors_end>:
 11c:	11 24       	eor	r1, r1
 11e:	1f be       	out	0x3f, r1	; 63
 120:	cf ef       	ldi	r28, 0xFF	; 255
 122:	d0 e1       	ldi	r29, 0x10	; 16
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	a0 e0       	ldi	r26, 0x00	; 0
 12c:	b1 e0       	ldi	r27, 0x01	; 1
 12e:	e8 ec       	ldi	r30, 0xC8	; 200
 130:	fb e0       	ldi	r31, 0x0B	; 11
 132:	00 e0       	ldi	r16, 0x00	; 0
 134:	0b bf       	out	0x3b, r16	; 59
 136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x14>
 138:	07 90       	elpm	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	ac 30       	cpi	r26, 0x0C	; 12
 13e:	b1 07       	cpc	r27, r17
 140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0x10>

00000142 <__do_clear_bss>:
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	ac e0       	ldi	r26, 0x0C	; 12
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
 14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
 14c:	a3 31       	cpi	r26, 0x13	; 19
 14e:	b2 07       	cpc	r27, r18
 150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
 152:	be d3       	rcall	.+1916   	; 0x8d0 <main>
 154:	37 c5       	rjmp	.+2670   	; 0xbc4 <_exit>

00000156 <__bad_interrupt>:
 156:	54 cf       	rjmp	.-344    	; 0x0 <__vectors>

00000158 <delay_ms>:

/*! \brief Millisecond delay
 * \param ms the delay in milliseconds
 */
void delay_ms(unsigned char ms)
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <delay_ms+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <delay_ms+0x8>
 160:	1f 92       	push	r1
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8d 83       	std	Y+5, r24	; 0x05
   unsigned short delay_count = F_CPU / 4000;
 168:	80 ea       	ldi	r24, 0xA0	; 160
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01
#ifdef __GNUC__
    unsigned short cnt;
    __asm__ __volatile__ ("\n"
 170:	4d 81       	ldd	r20, Y+5	; 0x05
 172:	29 81       	ldd	r18, Y+1	; 0x01
 174:	3a 81       	ldd	r19, Y+2	; 0x02

00000176 <L_dl124>:
 176:	82 2f       	mov	r24, r18
 178:	93 2f       	mov	r25, r19

0000017a <L_dl224>:
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <L_dl224>
 17e:	4a 95       	dec	r20
 180:	d1 f7       	brne	.-12     	; 0x176 <L_dl124>
 182:	9c 83       	std	Y+4, r25	; 0x04
 184:	8b 83       	std	Y+3, r24	; 0x03
    while (ms--) {
        delay_cnt_buffer = delay_cnt;
        while (delay_cnt_buffer--);
    }
#endif
}
 186:	00 00       	nop
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcdInitHW>:
	lcdBusyWait();				// wait until LCD not busy
	data = *((volatile unsigned char *) (LCD_DATA_ADDR));
	//cbi(MCUCR, SRW);			// disable RAM waitstate
#endif
	return data;
}
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	85 e2       	ldi	r24, 0x25	; 37
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	25 e2       	ldi	r18, 0x25	; 37
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	20 81       	ld	r18, Z
 1ac:	2f 7e       	andi	r18, 0xEF	; 239
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
 1b2:	85 e2       	ldi	r24, 0x25	; 37
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	25 e2       	ldi	r18, 0x25	; 37
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	20 81       	ld	r18, Z
 1be:	2f 7d       	andi	r18, 0xDF	; 223
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	25 e2       	ldi	r18, 0x25	; 37
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	2f 7b       	andi	r18, 0xBF	; 191
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	84 e2       	ldi	r24, 0x24	; 36
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	24 e2       	ldi	r18, 0x24	; 36
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	f9 01       	movw	r30, r18
 1e0:	20 81       	ld	r18, Z
 1e2:	20 61       	ori	r18, 0x10	; 16
 1e4:	fc 01       	movw	r30, r24
 1e6:	20 83       	st	Z, r18
 1e8:	84 e2       	ldi	r24, 0x24	; 36
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	24 e2       	ldi	r18, 0x24	; 36
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	f9 01       	movw	r30, r18
 1f2:	20 81       	ld	r18, Z
 1f4:	20 62       	ori	r18, 0x20	; 32
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
 1fa:	84 e2       	ldi	r24, 0x24	; 36
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	24 e2       	ldi	r18, 0x24	; 36
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	f9 01       	movw	r30, r18
 204:	20 81       	ld	r18, Z
 206:	20 64       	ori	r18, 0x40	; 64
 208:	fc 01       	movw	r30, r24
 20a:	20 83       	st	Z, r18
 20c:	81 e2       	ldi	r24, 0x21	; 33
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	10 82       	st	Z, r1
 214:	82 e2       	ldi	r24, 0x22	; 34
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <lcdBusyWait>:
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	85 e2       	ldi	r24, 0x25	; 37
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	25 e2       	ldi	r18, 0x25	; 37
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	2f 7e       	andi	r18, 0xEF	; 239
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
 240:	81 e2       	ldi	r24, 0x21	; 33
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	10 82       	st	Z, r1
 248:	82 e2       	ldi	r24, 0x22	; 34
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	25 e2       	ldi	r18, 0x25	; 37
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	20 62       	ori	r18, 0x20	; 32
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
 264:	85 e2       	ldi	r24, 0x25	; 37
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	25 e2       	ldi	r18, 0x25	; 37
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	f9 01       	movw	r30, r18
 26e:	20 81       	ld	r18, Z
 270:	20 64       	ori	r18, 0x40	; 64
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
 276:	00 00       	nop
 278:	00 00       	nop
 27a:	00 00       	nop
 27c:	1e c0       	rjmp	.+60     	; 0x2ba <lcdBusyWait+0x94>
 27e:	85 e2       	ldi	r24, 0x25	; 37
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	25 e2       	ldi	r18, 0x25	; 37
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	20 81       	ld	r18, Z
 28a:	2f 7b       	andi	r18, 0xBF	; 191
 28c:	fc 01       	movw	r30, r24
 28e:	20 83       	st	Z, r18
	...
 29c:	85 e2       	ldi	r24, 0x25	; 37
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	25 e2       	ldi	r18, 0x25	; 37
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	f9 01       	movw	r30, r18
 2a6:	20 81       	ld	r18, Z
 2a8:	20 64       	ori	r18, 0x40	; 64
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
	...
 2ba:	80 e2       	ldi	r24, 0x20	; 32
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	e4 f2       	brlt	.-72     	; 0x27e <lcdBusyWait+0x58>
 2c6:	85 e2       	ldi	r24, 0x25	; 37
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	25 e2       	ldi	r18, 0x25	; 37
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	2f 7b       	andi	r18, 0xBF	; 191
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
 2d8:	00 00       	nop
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <lcdControlWrite>:
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	1f 92       	push	r1
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	9c df       	rcall	.-200    	; 0x226 <lcdBusyWait>
 2ee:	85 e2       	ldi	r24, 0x25	; 37
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	25 e2       	ldi	r18, 0x25	; 37
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 81       	ld	r18, Z
 2fa:	2f 7e       	andi	r18, 0xEF	; 239
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	85 e2       	ldi	r24, 0x25	; 37
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	25 e2       	ldi	r18, 0x25	; 37
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	20 81       	ld	r18, Z
 30c:	2f 7d       	andi	r18, 0xDF	; 223
 30e:	fc 01       	movw	r30, r24
 310:	20 83       	st	Z, r18
 312:	85 e2       	ldi	r24, 0x25	; 37
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	25 e2       	ldi	r18, 0x25	; 37
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	20 81       	ld	r18, Z
 31e:	20 64       	ori	r18, 0x40	; 64
 320:	fc 01       	movw	r30, r24
 322:	20 83       	st	Z, r18
 324:	81 e2       	ldi	r24, 0x21	; 33
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	2f ef       	ldi	r18, 0xFF	; 255
 32a:	fc 01       	movw	r30, r24
 32c:	20 83       	st	Z, r18
 32e:	82 e2       	ldi	r24, 0x22	; 34
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	29 81       	ldd	r18, Y+1	; 0x01
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
	...
 344:	85 e2       	ldi	r24, 0x25	; 37
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	25 e2       	ldi	r18, 0x25	; 37
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	f9 01       	movw	r30, r18
 34e:	20 81       	ld	r18, Z
 350:	2f 7b       	andi	r18, 0xBF	; 191
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
 356:	81 e2       	ldi	r24, 0x21	; 33
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	10 82       	st	Z, r1
 35e:	82 e2       	ldi	r24, 0x22	; 34
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	2f ef       	ldi	r18, 0xFF	; 255
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
 368:	00 00       	nop
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <lcdControlRead>:
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	cd b7       	in	r28, 0x3d	; 61
 37a:	de b7       	in	r29, 0x3e	; 62
 37c:	54 df       	rcall	.-344    	; 0x226 <lcdBusyWait>
 37e:	81 e2       	ldi	r24, 0x21	; 33
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	10 82       	st	Z, r1
 386:	82 e2       	ldi	r24, 0x22	; 34
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
 390:	85 e2       	ldi	r24, 0x25	; 37
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	25 e2       	ldi	r18, 0x25	; 37
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	20 81       	ld	r18, Z
 39c:	2f 7e       	andi	r18, 0xEF	; 239
 39e:	fc 01       	movw	r30, r24
 3a0:	20 83       	st	Z, r18
 3a2:	85 e2       	ldi	r24, 0x25	; 37
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	25 e2       	ldi	r18, 0x25	; 37
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	f9 01       	movw	r30, r18
 3ac:	20 81       	ld	r18, Z
 3ae:	20 62       	ori	r18, 0x20	; 32
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
 3b4:	85 e2       	ldi	r24, 0x25	; 37
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	25 e2       	ldi	r18, 0x25	; 37
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	f9 01       	movw	r30, r18
 3be:	20 81       	ld	r18, Z
 3c0:	20 64       	ori	r18, 0x40	; 64
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
	...
 3d2:	80 e2       	ldi	r24, 0x20	; 32
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	10 81       	ld	r17, Z
 3da:	85 e2       	ldi	r24, 0x25	; 37
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	25 e2       	ldi	r18, 0x25	; 37
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	f9 01       	movw	r30, r18
 3e4:	20 81       	ld	r18, Z
 3e6:	2f 7b       	andi	r18, 0xBF	; 191
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
 3ec:	81 2f       	mov	r24, r17
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	08 95       	ret

000003f6 <lcdDataWrite>:
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	1f 92       	push	r1
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	89 83       	std	Y+1, r24	; 0x01
 402:	11 df       	rcall	.-478    	; 0x226 <lcdBusyWait>
 404:	85 e2       	ldi	r24, 0x25	; 37
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	25 e2       	ldi	r18, 0x25	; 37
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	f9 01       	movw	r30, r18
 40e:	20 81       	ld	r18, Z
 410:	20 61       	ori	r18, 0x10	; 16
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
 416:	85 e2       	ldi	r24, 0x25	; 37
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	25 e2       	ldi	r18, 0x25	; 37
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	f9 01       	movw	r30, r18
 420:	20 81       	ld	r18, Z
 422:	2f 7d       	andi	r18, 0xDF	; 223
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
 428:	85 e2       	ldi	r24, 0x25	; 37
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	25 e2       	ldi	r18, 0x25	; 37
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	f9 01       	movw	r30, r18
 432:	20 81       	ld	r18, Z
 434:	20 64       	ori	r18, 0x40	; 64
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
 43a:	81 e2       	ldi	r24, 0x21	; 33
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
 444:	82 e2       	ldi	r24, 0x22	; 34
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	29 81       	ldd	r18, Y+1	; 0x01
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
	...
 45a:	85 e2       	ldi	r24, 0x25	; 37
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	25 e2       	ldi	r18, 0x25	; 37
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	f9 01       	movw	r30, r18
 464:	20 81       	ld	r18, Z
 466:	2f 7b       	andi	r18, 0xBF	; 191
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
 46c:	81 e2       	ldi	r24, 0x21	; 33
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	fc 01       	movw	r30, r24
 472:	10 82       	st	Z, r1
 474:	82 e2       	ldi	r24, 0x22	; 34
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	2f ef       	ldi	r18, 0xFF	; 255
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
 47e:	00 00       	nop
 480:	0f 90       	pop	r0
 482:	df 91       	pop	r29
 484:	cf 91       	pop	r28
 486:	08 95       	ret

00000488 <lcdInit>:
/*************************************************************/
/********************* PUBLIC FUNCTIONS **********************/
/*************************************************************/

void lcdInit()
{
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	cd b7       	in	r28, 0x3d	; 61
	// initialize hardware
	lcdInitHW();
	// LCD function set
	lcdControlWrite(LCD_FUNCTION_DEFAULT);
 48e:	de b7       	in	r29, 0x3e	; 62
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
 490:	83 de       	rcall	.-762    	; 0x198 <lcdInitHW>
 492:	88 e3       	ldi	r24, 0x38	; 56
	delay_ms(60);	// wait 60ms
 494:	25 df       	rcall	.-438    	; 0x2e0 <lcdControlWrite>
 496:	81 e0       	ldi	r24, 0x01	; 1
	// set entry mode
	lcdControlWrite(1<<LCD_ENTRY_MODE | 1<<LCD_ENTRY_INC);
 498:	23 df       	rcall	.-442    	; 0x2e0 <lcdControlWrite>
	// set display to on
	//lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY | 1<<LCD_ON_BLINK);
	lcdControlWrite(1<<LCD_ON_CTRL | 1<<LCD_ON_DISPLAY);
 49a:	8c e3       	ldi	r24, 0x3C	; 60
 49c:	90 e0       	ldi	r25, 0x00	; 0
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
 49e:	5c de       	rcall	.-840    	; 0x158 <delay_ms>
 4a0:	86 e0       	ldi	r24, 0x06	; 6
	// set data address to 0
	lcdControlWrite(1<<LCD_DDRAM | 0x00);
 4a2:	1e df       	rcall	.-452    	; 0x2e0 <lcdControlWrite>
 4a4:	8c e0       	ldi	r24, 0x0C	; 12
 4a6:	1c df       	rcall	.-456    	; 0x2e0 <lcdControlWrite>

	// load the first 8 custom characters
	lcdLoadCustomChar((u08*)LcdCustomChar,0,0);
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	1a df       	rcall	.-460    	; 0x2e0 <lcdControlWrite>
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	18 df       	rcall	.-464    	; 0x2e0 <lcdControlWrite>
	lcdLoadCustomChar((u08*)LcdCustomChar,1,1);
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	84 e9       	ldi	r24, 0x94	; 148
 4b6:	90 e0       	ldi	r25, 0x00	; 0
	lcdLoadCustomChar((u08*)LcdCustomChar,2,2);
 4b8:	6e d0       	rcall	.+220    	; 0x596 <lcdLoadCustomChar>
 4ba:	41 e0       	ldi	r20, 0x01	; 1
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	84 e9       	ldi	r24, 0x94	; 148
 4c0:	90 e0       	ldi	r25, 0x00	; 0
	lcdLoadCustomChar((u08*)LcdCustomChar,3,3);
 4c2:	69 d0       	rcall	.+210    	; 0x596 <lcdLoadCustomChar>
 4c4:	42 e0       	ldi	r20, 0x02	; 2
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	84 e9       	ldi	r24, 0x94	; 148
 4ca:	90 e0       	ldi	r25, 0x00	; 0
	lcdLoadCustomChar((u08*)LcdCustomChar,4,4);
 4cc:	64 d0       	rcall	.+200    	; 0x596 <lcdLoadCustomChar>
 4ce:	43 e0       	ldi	r20, 0x03	; 3
 4d0:	63 e0       	ldi	r22, 0x03	; 3
 4d2:	84 e9       	ldi	r24, 0x94	; 148
 4d4:	90 e0       	ldi	r25, 0x00	; 0
	lcdLoadCustomChar((u08*)LcdCustomChar,5,5);
 4d6:	5f d0       	rcall	.+190    	; 0x596 <lcdLoadCustomChar>
 4d8:	44 e0       	ldi	r20, 0x04	; 4
 4da:	64 e0       	ldi	r22, 0x04	; 4
 4dc:	84 e9       	ldi	r24, 0x94	; 148
 4de:	90 e0       	ldi	r25, 0x00	; 0
	lcdLoadCustomChar((u08*)LcdCustomChar,6,6);
 4e0:	5a d0       	rcall	.+180    	; 0x596 <lcdLoadCustomChar>
 4e2:	45 e0       	ldi	r20, 0x05	; 5
 4e4:	65 e0       	ldi	r22, 0x05	; 5
 4e6:	84 e9       	ldi	r24, 0x94	; 148
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	55 d0       	rcall	.+170    	; 0x596 <lcdLoadCustomChar>
	lcdLoadCustomChar((u08*)LcdCustomChar,7,7);
 4ec:	46 e0       	ldi	r20, 0x06	; 6
 4ee:	66 e0       	ldi	r22, 0x06	; 6
 4f0:	84 e9       	ldi	r24, 0x94	; 148
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	50 d0       	rcall	.+160    	; 0x596 <lcdLoadCustomChar>
 4f6:	47 e0       	ldi	r20, 0x07	; 7
}
 4f8:	67 e0       	ldi	r22, 0x07	; 7
 4fa:	84 e9       	ldi	r24, 0x94	; 148
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	4b d0       	rcall	.+150    	; 0x596 <lcdLoadCustomChar>
 500:	00 00       	nop
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret

00000508 <lcdHome>:

void lcdHome(void)
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
	// move cursor to home
	lcdControlWrite(1<<LCD_HOME);
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	e6 de       	rcall	.-564    	; 0x2e0 <lcdControlWrite>
}
 514:	00 00       	nop
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <lcdClear>:

void lcdClear(void)
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
	// clear LCD
	lcdControlWrite(1<<LCD_CLR);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	dc de       	rcall	.-584    	; 0x2e0 <lcdControlWrite>
}
 528:	00 00       	nop
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <lcdGotoXY>:

void lcdGotoXY(u08 x, u08 y)
{
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	00 d0       	rcall	.+0      	; 0x538 <lcdGotoXY+0x8>
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	6a 83       	std	Y+2, r22	; 0x02
	register u08 DDRAMAddr;

	// remap lines into proper order
	switch(y)
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	91 05       	cpc	r25, r1
 54a:	71 f0       	breq	.+28     	; 0x568 <lcdGotoXY+0x38>
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	91 05       	cpc	r25, r1
 550:	1c f4       	brge	.+6      	; 0x558 <lcdGotoXY+0x28>
 552:	89 2b       	or	r24, r25
 554:	39 f0       	breq	.+14     	; 0x564 <lcdGotoXY+0x34>
 556:	14 c0       	rjmp	.+40     	; 0x580 <lcdGotoXY+0x50>
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	91 05       	cpc	r25, r1
 55c:	49 f0       	breq	.+18     	; 0x570 <lcdGotoXY+0x40>
 55e:	03 97       	sbiw	r24, 0x03	; 3
 560:	59 f0       	breq	.+22     	; 0x578 <lcdGotoXY+0x48>
 562:	0e c0       	rjmp	.+28     	; 0x580 <lcdGotoXY+0x50>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
 564:	19 81       	ldd	r17, Y+1	; 0x01
 566:	0d c0       	rjmp	.+26     	; 0x582 <lcdGotoXY+0x52>
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	10 e4       	ldi	r17, 0x40	; 64
 56c:	18 0f       	add	r17, r24
 56e:	09 c0       	rjmp	.+18     	; 0x582 <lcdGotoXY+0x52>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	14 e1       	ldi	r17, 0x14	; 20
 574:	18 0f       	add	r17, r24
 576:	05 c0       	rjmp	.+10     	; 0x582 <lcdGotoXY+0x52>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	14 e5       	ldi	r17, 0x54	; 84
 57c:	18 0f       	add	r17, r24
 57e:	01 c0       	rjmp	.+2      	; 0x582 <lcdGotoXY+0x52>
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
 580:	19 81       	ldd	r17, Y+1	; 0x01
	}

	// set data address
	lcdControlWrite(1<<LCD_DDRAM | DDRAMAddr);
 582:	81 2f       	mov	r24, r17
 584:	80 68       	ori	r24, 0x80	; 128
 586:	ac de       	rcall	.-680    	; 0x2e0 <lcdControlWrite>
}
 588:	00 00       	nop
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	08 95       	ret

00000596 <lcdLoadCustomChar>:

void lcdLoadCustomChar(u08* lcdCustomCharArray, u08 romCharNum, u08 lcdCharNum)
{
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	28 97       	sbiw	r28, 0x08	; 8
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	9e 83       	std	Y+6, r25	; 0x06
 5ae:	8d 83       	std	Y+5, r24	; 0x05
 5b0:	6f 83       	std	Y+7, r22	; 0x07
	register u08 i;
	u08 saveDDRAMAddr;

	// backup the current cursor position
	saveDDRAMAddr = lcdControlRead() & 0x7F;
 5b2:	48 87       	std	Y+8, r20	; 0x08
 5b4:	de de       	rcall	.-580    	; 0x372 <lcdControlRead>
 5b6:	8f 77       	andi	r24, 0x7F	; 127

	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	88 85       	ldd	r24, Y+8	; 0x08
 5bc:	88 0f       	add	r24, r24
 5be:	88 0f       	add	r24, r24
 5c0:	88 0f       	add	r24, r24
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes
 5c2:	88 87       	std	Y+8, r24	; 0x08
 5c4:	8f 81       	ldd	r24, Y+7	; 0x07
 5c6:	88 0f       	add	r24, r24
 5c8:	88 0f       	add	r24, r24
 5ca:	88 0f       	add	r24, r24

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
 5cc:	8f 83       	std	Y+7, r24	; 0x07
 5ce:	10 e0       	ldi	r17, 0x00	; 0
	{
		// set CG RAM address
		lcdControlWrite((1<<LCD_CGRAM) | (lcdCharNum+i));
 5d0:	1b c0       	rjmp	.+54     	; 0x608 <lcdLoadCustomChar+0x72>
 5d2:	88 85       	ldd	r24, Y+8	; 0x08
 5d4:	81 0f       	add	r24, r17
 5d6:	80 64       	ori	r24, 0x40	; 64
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
 5d8:	83 de       	rcall	.-762    	; 0x2e0 <lcdControlWrite>
 5da:	8f 81       	ldd	r24, Y+7	; 0x07
 5dc:	28 2f       	mov	r18, r24
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	81 2f       	mov	r24, r17
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	82 0f       	add	r24, r18
 5e6:	93 1f       	adc	r25, r19
 5e8:	2d 81       	ldd	r18, Y+5	; 0x05
 5ea:	3e 81       	ldd	r19, Y+6	; 0x06
 5ec:	82 0f       	add	r24, r18
 5ee:	93 1f       	adc	r25, r19
 5f0:	9b 83       	std	Y+3, r25	; 0x03
 5f2:	8a 83       	std	Y+2, r24	; 0x02
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	9b 81       	ldd	r25, Y+3	; 0x03
 5f8:	fc 01       	movw	r30, r24
 5fa:	84 91       	lpm	r24, Z
 5fc:	8c 83       	std	Y+4, r24	; 0x04
 5fe:	8c 81       	ldd	r24, Y+4	; 0x04
	// multiply the character index by 8
	lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
	romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

	// copy the 8 bytes into CG (character generator) RAM
	for(i=0; i<8; i++)
 600:	fa de       	rcall	.-524    	; 0x3f6 <lcdDataWrite>
 602:	81 2f       	mov	r24, r17
 604:	11 e0       	ldi	r17, 0x01	; 1
 606:	18 0f       	add	r17, r24
		// write character data
		lcdDataWrite( pgm_read_byte(lcdCustomCharArray+romCharNum+i) );
	}

	// restore the previous cursor position
	lcdControlWrite(1<<LCD_DDRAM | saveDDRAMAddr);
 608:	18 30       	cpi	r17, 0x08	; 8
 60a:	18 f3       	brcs	.-58     	; 0x5d2 <lcdLoadCustomChar+0x3c>
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	80 68       	ori	r24, 0x80	; 128

}
 610:	67 de       	rcall	.-818    	; 0x2e0 <lcdControlWrite>
 612:	00 00       	nop
 614:	28 96       	adiw	r28, 0x08	; 8
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	f8 94       	cli
 61a:	de bf       	out	0x3e, r29	; 62
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	cd bf       	out	0x3d, r28	; 61
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	08 95       	ret

00000628 <lcdPrintData>:

void lcdPrintData(char* data, u08 nBytes)
{
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	00 d0       	rcall	.+0      	; 0x630 <lcdPrintData+0x8>
 630:	1f 92       	push	r1
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	9a 83       	std	Y+2, r25	; 0x02
 638:	89 83       	std	Y+1, r24	; 0x01
 63a:	6b 83       	std	Y+3, r22	; 0x03
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	9a 81       	ldd	r25, Y+2	; 0x02
 640:	89 2b       	or	r24, r25
 642:	91 f0       	breq	.+36     	; 0x668 <lcdPrintData+0x40>

	// print data
	for(i=0; i<nBytes; i++)
 644:	10 e0       	ldi	r17, 0x00	; 0
 646:	0c c0       	rjmp	.+24     	; 0x660 <lcdPrintData+0x38>
	{
		lcdDataWrite(data[i]);
 648:	81 2f       	mov	r24, r17
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	29 81       	ldd	r18, Y+1	; 0x01
 64e:	3a 81       	ldd	r19, Y+2	; 0x02
 650:	82 0f       	add	r24, r18
 652:	93 1f       	adc	r25, r19
 654:	fc 01       	movw	r30, r24
 656:	80 81       	ld	r24, Z
 658:	ce de       	rcall	.-612    	; 0x3f6 <lcdDataWrite>

	// check to make sure we have a good pointer
	if (!data) return;

	// print data
	for(i=0; i<nBytes; i++)
 65a:	81 2f       	mov	r24, r17
 65c:	11 e0       	ldi	r17, 0x01	; 1
 65e:	18 0f       	add	r17, r24
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	18 17       	cp	r17, r24
 664:	88 f3       	brcs	.-30     	; 0x648 <lcdPrintData+0x20>
 666:	01 c0       	rjmp	.+2      	; 0x66a <lcdPrintData+0x42>
void lcdPrintData(char* data, u08 nBytes)
{
	register u08 i;

	// check to make sure we have a good pointer
	if (!data) return;
 668:	00 00       	nop
	// print data
	for(i=0; i<nBytes; i++)
	{
		lcdDataWrite(data[i]);
	}
}
 66a:	0f 90       	pop	r0
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	1f 91       	pop	r17
 676:	08 95       	ret

00000678 <initGPIO>:

volatile uint16_t adc_value;  //Allocate the double byte memory space into which the result of the 10 bits Analog to Digital Converter (ADC) is stored.


int initGPIO(void)
{
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
	//Set up input output direction on Port C and G
	DDRB |= (1<<DB_LED);	// Set the display back-light's IO pin an an output. Leave other bits as they were.
 680:	84 e2       	ldi	r24, 0x24	; 36
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	24 e2       	ldi	r18, 0x24	; 36
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	f9 01       	movw	r30, r18
 68a:	20 81       	ld	r18, Z
 68c:	20 68       	ori	r18, 0x80	; 128
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
	DDRC = 0b00000111;		// Set the direction of the IO pins on Port C to output on the 3 least significant bits and input on the 5 higher ones. 5 buttons and 3 LEDs.
 692:	87 e2       	ldi	r24, 0x27	; 39
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	27 e0       	ldi	r18, 0x07	; 7
 698:	fc 01       	movw	r30, r24
 69a:	20 83       	st	Z, r18
	DDRG |= 0b00000011;		// set the direction of the IO pins on Port G's lower 2 bytes as output (LEDs 1 & 2). Leave the other bits as they were.
 69c:	83 e3       	ldi	r24, 0x33	; 51
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	23 e3       	ldi	r18, 0x33	; 51
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	f9 01       	movw	r30, r18
 6a6:	20 81       	ld	r18, Z
 6a8:	23 60       	ori	r18, 0x03	; 3
 6aa:	fc 01       	movw	r30, r24
 6ac:	20 83       	st	Z, r18
	return(0);
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	90 e0       	ldi	r25, 0x00	; 0
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <initExtInt>:

int initExtInt(void)
{
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
	//Set up external Interrupts
	// The five Switches are ORed to Pin PE6 which is alternatively Int6
	EICRB |= (0<<ISC61) | (1<<ISC60);  //Any logical change to INT6 generates an interrupt
 6c0:	8a e6       	ldi	r24, 0x6A	; 106
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	2a e6       	ldi	r18, 0x6A	; 106
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	f9 01       	movw	r30, r18
 6ca:	20 81       	ld	r18, Z
 6cc:	20 61       	ori	r18, 0x10	; 16
 6ce:	fc 01       	movw	r30, r24
 6d0:	20 83       	st	Z, r18
	EIMSK |= (1<<INTF6);
 6d2:	8d e3       	ldi	r24, 0x3D	; 61
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	2d e3       	ldi	r18, 0x3D	; 61
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	f9 01       	movw	r30, r18
 6dc:	20 81       	ld	r18, Z
 6de:	20 64       	ori	r18, 0x40	; 64
 6e0:	fc 01       	movw	r30, r24
 6e2:	20 83       	st	Z, r18
	return(6);
 6e4:	86 e0       	ldi	r24, 0x06	; 6
 6e6:	90 e0       	ldi	r25, 0x00	; 0
}
 6e8:	df 91       	pop	r29
 6ea:	cf 91       	pop	r28
 6ec:	08 95       	ret

000006ee <initTimer2>:


int initTimer2()
{
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
	/// Set up an internal Interrupt that will occur every 5 milliseconds.
	/// It uses the Timer Counter 2 in CTC mode with a pre-scaler of 256 and a value of 155 (it should be 155.25).
	// 
	TCCR2A = (1<<WGM21); // | (0<<WGM20);  //CTC mode
 6f6:	80 eb       	ldi	r24, 0xB0	; 176
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	28 e0       	ldi	r18, 0x08	; 8
 6fc:	fc 01       	movw	r30, r24
 6fe:	20 83       	st	Z, r18
	//TCCR2A |= (0<<COM2A1) | (0<<COM2A0); // Mormal port operation, OC2A is disconnected.
	TCCR2A |= (1<<CS22) | (1<<CS21); //| (0<<CS20); /// Divide source frequency source by 256.
 700:	80 eb       	ldi	r24, 0xB0	; 176
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	20 eb       	ldi	r18, 0xB0	; 176
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	f9 01       	movw	r30, r18
 70a:	20 81       	ld	r18, Z
 70c:	26 60       	ori	r18, 0x06	; 6
 70e:	fc 01       	movw	r30, r24
 710:	20 83       	st	Z, r18
	TCNT2 = 0;	/// Make sure the timer counter is set to 0.
 712:	82 eb       	ldi	r24, 0xB2	; 178
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	fc 01       	movw	r30, r24
 718:	10 82       	st	Z, r1
	OCR2A = 155;
 71a:	83 eb       	ldi	r24, 0xB3	; 179
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	2b e9       	ldi	r18, 0x9B	; 155
 720:	fc 01       	movw	r30, r24
 722:	20 83       	st	Z, r18
	TIMSK2 = (1<<OCF2A); // Interrupt flag register to enable output compare.
 724:	80 e7       	ldi	r24, 0x70	; 112
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	22 e0       	ldi	r18, 0x02	; 2
 72a:	fc 01       	movw	r30, r24
 72c:	20 83       	st	Z, r18
	return(2);
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	90 e0       	ldi	r25, 0x00	; 0
}
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	08 95       	ret

00000738 <initADC>:

int initADC(){
 738:	cf 93       	push	r28
 73a:	df 93       	push	r29
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
	//Set up analog to digital conversion (ADC) 
	//ADMUX register
	//AVcc with external capacitor on AREF pin (the 2 following lines)
	ADMUX &= ~(1<<REFS1);  //Clear REFS1 (although it should be 0 at reset)
 740:	8c e7       	ldi	r24, 0x7C	; 124
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	2c e7       	ldi	r18, 0x7C	; 124
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	f9 01       	movw	r30, r18
 74a:	20 81       	ld	r18, Z
 74c:	2f 77       	andi	r18, 0x7F	; 127
 74e:	fc 01       	movw	r30, r24
 750:	20 83       	st	Z, r18
	ADMUX |= (1<<REFS0);   //Set REFS0  
 752:	8c e7       	ldi	r24, 0x7C	; 124
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	2c e7       	ldi	r18, 0x7C	; 124
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	f9 01       	movw	r30, r18
 75c:	20 81       	ld	r18, Z
 75e:	20 64       	ori	r18, 0x40	; 64
 760:	fc 01       	movw	r30, r24
 762:	20 83       	st	Z, r18
	ADMUX &= (0b11100000); //Single ended input on ADC0
 764:	8c e7       	ldi	r24, 0x7C	; 124
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	2c e7       	ldi	r18, 0x7C	; 124
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	f9 01       	movw	r30, r18
 76e:	20 81       	ld	r18, Z
 770:	20 7e       	andi	r18, 0xE0	; 224
 772:	fc 01       	movw	r30, r24
 774:	20 83       	st	Z, r18
	ADMUX &= ~(1<<ADLAR);  //Making sure ADLAR is zero (somehow it was set to 1)
 776:	8c e7       	ldi	r24, 0x7C	; 124
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	2c e7       	ldi	r18, 0x7C	; 124
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	f9 01       	movw	r30, r18
 780:	20 81       	ld	r18, Z
 782:	2f 7d       	andi	r18, 0xDF	; 223
 784:	fc 01       	movw	r30, r24
 786:	20 83       	st	Z, r18
	//The ACDC control and status register B ADCSRB
	ADCSRB &= ~(1<<ADTS2) & ~(1<<ADTS1) & ~(1<<ADTS0);  //Free running mode
 788:	8b e7       	ldi	r24, 0x7B	; 123
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	2b e7       	ldi	r18, 0x7B	; 123
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	f9 01       	movw	r30, r18
 792:	20 81       	ld	r18, Z
 794:	28 7f       	andi	r18, 0xF8	; 248
 796:	fc 01       	movw	r30, r24
 798:	20 83       	st	Z, r18
	//The ADC control and status register A ADCSRA
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) |(1<<ADPS0);//set sampling frequency pre-scaler to a division by 128
 79a:	8a e7       	ldi	r24, 0x7A	; 122
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	2a e7       	ldi	r18, 0x7A	; 122
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	f9 01       	movw	r30, r18
 7a4:	20 81       	ld	r18, Z
 7a6:	27 60       	ori	r18, 0x07	; 7
 7a8:	fc 01       	movw	r30, r24
 7aa:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADEN)  | (1<<ADATE) | (1<<ADIE);//enable ADC, able ADC auto trigger, enable ADC interrupt
 7ac:	8a e7       	ldi	r24, 0x7A	; 122
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	2a e7       	ldi	r18, 0x7A	; 122
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	f9 01       	movw	r30, r18
 7b6:	20 81       	ld	r18, Z
 7b8:	28 6a       	ori	r18, 0xA8	; 168
 7ba:	fc 01       	movw	r30, r24
 7bc:	20 83       	st	Z, r18
	return(0);
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	90 e0       	ldi	r25, 0x00	; 0
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <initDisplay>:

int initDisplay(void)
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
	lcdInit();	//initialize the LCD
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	5b de       	rcall	.-842    	; 0x488 <lcdInit>
 7d2:	a4 de       	rcall	.-696    	; 0x51c <lcdClear>
 7d4:	99 de       	rcall	.-718    	; 0x508 <lcdHome>
 7d6:	63 e0       	ldi	r22, 0x03	; 3
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	91 e0       	ldi	r25, 0x01	; 1
 7dc:	25 df       	rcall	.-438    	; 0x628 <lcdPrintData>
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <flashLEDs>:
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	1f 92       	push	r1
 7ee:	cd b7       	in	r28, 0x3d	; 61
 7f0:	de b7       	in	r29, 0x3e	; 62
 7f2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LEDcountD>
 7f6:	88 23       	and	r24, r24
 7f8:	31 f0       	breq	.+12     	; 0x806 <flashLEDs+0x1e>
 7fa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LEDcountD>
 7fe:	81 50       	subi	r24, 0x01	; 1
 800:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <LEDcountD>
 804:	60 c0       	rjmp	.+192    	; 0x8c6 <flashLEDs+0xde>
 806:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <LEDperiod>
 80a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <LEDcountD>
 80e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LEDpattern>
 812:	8f 71       	andi	r24, 0x1F	; 31
 814:	89 83       	std	Y+1, r24	; 0x01
 816:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LEDpattern>
 81a:	88 2f       	mov	r24, r24
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	80 7e       	andi	r24, 0xE0	; 224
 820:	99 27       	eor	r25, r25
 822:	80 34       	cpi	r24, 0x40	; 64
 824:	91 05       	cpc	r25, r1
 826:	b9 f0       	breq	.+46     	; 0x856 <flashLEDs+0x6e>
 828:	80 38       	cpi	r24, 0x80	; 128
 82a:	91 05       	cpc	r25, r1
 82c:	19 f0       	breq	.+6      	; 0x834 <flashLEDs+0x4c>
 82e:	80 97       	sbiw	r24, 0x20	; 32
 830:	c9 f0       	breq	.+50     	; 0x864 <flashLEDs+0x7c>
 832:	27 c0       	rjmp	.+78     	; 0x882 <flashLEDs+0x9a>
 834:	89 81       	ldd	r24, Y+1	; 0x01
 836:	88 0f       	add	r24, r24
 838:	89 83       	std	Y+1, r24	; 0x01
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	88 2f       	mov	r24, r24
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	80 72       	andi	r24, 0x20	; 32
 842:	99 27       	eor	r25, r25
 844:	89 2b       	or	r24, r25
 846:	e1 f0       	breq	.+56     	; 0x880 <flashLEDs+0x98>
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	81 60       	ori	r24, 0x01	; 1
 84c:	89 83       	std	Y+1, r24	; 0x01
 84e:	89 81       	ldd	r24, Y+1	; 0x01
 850:	8f 7d       	andi	r24, 0xDF	; 223
 852:	89 83       	std	Y+1, r24	; 0x01
 854:	15 c0       	rjmp	.+42     	; 0x880 <flashLEDs+0x98>
 856:	89 81       	ldd	r24, Y+1	; 0x01
 858:	80 95       	com	r24
 85a:	89 83       	std	Y+1, r24	; 0x01
 85c:	89 81       	ldd	r24, Y+1	; 0x01
 85e:	8f 71       	andi	r24, 0x1F	; 31
 860:	89 83       	std	Y+1, r24	; 0x01
 862:	0f c0       	rjmp	.+30     	; 0x882 <flashLEDs+0x9a>
 864:	89 81       	ldd	r24, Y+1	; 0x01
 866:	88 2f       	mov	r24, r24
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	81 70       	andi	r24, 0x01	; 1
 86c:	99 27       	eor	r25, r25
 86e:	89 2b       	or	r24, r25
 870:	19 f0       	breq	.+6      	; 0x878 <flashLEDs+0x90>
 872:	89 81       	ldd	r24, Y+1	; 0x01
 874:	80 62       	ori	r24, 0x20	; 32
 876:	89 83       	std	Y+1, r24	; 0x01
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	86 95       	lsr	r24
 87c:	89 83       	std	Y+1, r24	; 0x01
 87e:	01 c0       	rjmp	.+2      	; 0x882 <flashLEDs+0x9a>
 880:	00 00       	nop
 882:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <LEDpattern>
 886:	98 2f       	mov	r25, r24
 888:	90 7e       	andi	r25, 0xE0	; 224
 88a:	89 81       	ldd	r24, Y+1	; 0x01
 88c:	89 2b       	or	r24, r25
 88e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 892:	84 e3       	ldi	r24, 0x34	; 52
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	fc 01       	movw	r30, r24
 898:	80 81       	ld	r24, Z
 89a:	84 e3       	ldi	r24, 0x34	; 52
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	29 81       	ldd	r18, Y+1	; 0x01
 8a0:	23 70       	andi	r18, 0x03	; 3
 8a2:	fc 01       	movw	r30, r24
 8a4:	20 83       	st	Z, r18
 8a6:	89 81       	ldd	r24, Y+1	; 0x01
 8a8:	86 95       	lsr	r24
 8aa:	86 95       	lsr	r24
 8ac:	89 83       	std	Y+1, r24	; 0x01
 8ae:	88 e2       	ldi	r24, 0x28	; 40
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	28 e2       	ldi	r18, 0x28	; 40
 8b4:	30 e0       	ldi	r19, 0x00	; 0
 8b6:	f9 01       	movw	r30, r18
 8b8:	20 81       	ld	r18, Z
 8ba:	32 2f       	mov	r19, r18
 8bc:	38 7f       	andi	r19, 0xF8	; 248
 8be:	29 81       	ldd	r18, Y+1	; 0x01
 8c0:	23 2b       	or	r18, r19
 8c2:	fc 01       	movw	r30, r24
 8c4:	20 83       	st	Z, r18
 8c6:	00 00       	nop
 8c8:	0f 90       	pop	r0
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <main>:
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
 8d8:	2b 97       	sbiw	r28, 0x0b	; 11
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	f8 94       	cli
 8de:	de bf       	out	0x3e, r29	; 62
 8e0:	0f be       	out	0x3f, r0	; 63
 8e2:	cd bf       	out	0x3d, r28	; 61
 8e4:	8f e0       	ldi	r24, 0x0F	; 15
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	84 e4       	ldi	r24, 0x44	; 68
 8ea:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 8ee:	84 e6       	ldi	r24, 0x64	; 100
 8f0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <LEDperiod>
 8f4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <LEDcountD>
 8f8:	bf de       	rcall	.-642    	; 0x678 <initGPIO>
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	dd de       	rcall	.-582    	; 0x6b8 <initExtInt>
 8fe:	89 83       	std	Y+1, r24	; 0x01
 900:	f6 de       	rcall	.-532    	; 0x6ee <initTimer2>
 902:	89 83       	std	Y+1, r24	; 0x01
 904:	19 df       	rcall	.-462    	; 0x738 <initADC>
 906:	89 83       	std	Y+1, r24	; 0x01
 908:	5f df       	rcall	.-322    	; 0x7c8 <initDisplay>
 90a:	89 83       	std	Y+1, r24	; 0x01
 90c:	8a e7       	ldi	r24, 0x7A	; 122
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	2a e7       	ldi	r18, 0x7A	; 122
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	f9 01       	movw	r30, r18
 916:	20 81       	ld	r18, Z
 918:	20 64       	ori	r18, 0x40	; 64
 91a:	fc 01       	movw	r30, r24
 91c:	20 83       	st	Z, r18
 91e:	78 94       	sei
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	8f 5f       	subi	r24, 0xFF	; 255
 924:	89 83       	std	Y+1, r24	; 0x01
 926:	8a e7       	ldi	r24, 0x7A	; 122
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	2a e7       	ldi	r18, 0x7A	; 122
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	f9 01       	movw	r30, r18
 930:	20 81       	ld	r18, Z
 932:	27 7f       	andi	r18, 0xF7	; 247
 934:	fc 01       	movw	r30, r24
 936:	20 83       	st	Z, r18
 938:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 93c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 940:	9e 01       	movw	r18, r28
 942:	2e 5f       	subi	r18, 0xFE	; 254
 944:	3f 4f       	sbci	r19, 0xFF	; 255
 946:	4a e0       	ldi	r20, 0x0A	; 10
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	b9 01       	movw	r22, r18
 94c:	fe d0       	rcall	.+508    	; 0xb4a <itoa>
 94e:	8a e7       	ldi	r24, 0x7A	; 122
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	2a e7       	ldi	r18, 0x7A	; 122
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	f9 01       	movw	r30, r18
 958:	20 81       	ld	r18, Z
 95a:	28 60       	ori	r18, 0x08	; 8
 95c:	fc 01       	movw	r30, r24
 95e:	20 83       	st	Z, r18
 960:	61 e0       	ldi	r22, 0x01	; 1
 962:	85 e0       	ldi	r24, 0x05	; 5
 964:	e5 dd       	rcall	.-1078   	; 0x530 <lcdGotoXY>
 966:	66 e0       	ldi	r22, 0x06	; 6
 968:	84 e0       	ldi	r24, 0x04	; 4
 96a:	91 e0       	ldi	r25, 0x01	; 1
 96c:	5d de       	rcall	.-838    	; 0x628 <lcdPrintData>
 96e:	61 e0       	ldi	r22, 0x01	; 1
 970:	85 e0       	ldi	r24, 0x05	; 5
 972:	de dd       	rcall	.-1092   	; 0x530 <lcdGotoXY>
 974:	ce 01       	movw	r24, r28
 976:	02 96       	adiw	r24, 0x02	; 2
 978:	df d0       	rcall	.+446    	; 0xb38 <strlen>
 97a:	28 2f       	mov	r18, r24
 97c:	ce 01       	movw	r24, r28
 97e:	02 96       	adiw	r24, 0x02	; 2
 980:	62 2f       	mov	r22, r18
 982:	52 de       	rcall	.-860    	; 0x628 <lcdPrintData>
 984:	cd cf       	rjmp	.-102    	; 0x920 <main+0x50>

00000986 <__vector_7>:
 986:	1f 92       	push	r1
 988:	0f 92       	push	r0
 98a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 98e:	0f 92       	push	r0
 990:	11 24       	eor	r1, r1
 992:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 996:	0f 92       	push	r0
 998:	8f 93       	push	r24
 99a:	9f 93       	push	r25
 99c:	ef 93       	push	r30
 99e:	ff 93       	push	r31
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	cd b7       	in	r28, 0x3d	; 61
 9a6:	de b7       	in	r29, 0x3e	; 62
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 9ae:	86 e2       	ldi	r24, 0x26	; 38
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	fc 01       	movw	r30, r24
 9b4:	80 81       	ld	r24, Z
 9b6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <buttons>
 9ba:	00 00       	nop
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	ff 91       	pop	r31
 9c2:	ef 91       	pop	r30
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	0f 90       	pop	r0
 9ca:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 9ce:	0f 90       	pop	r0
 9d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9d4:	0f 90       	pop	r0
 9d6:	1f 90       	pop	r1
 9d8:	18 95       	reti

000009da <__vector_9>:
 9da:	1f 92       	push	r1
 9dc:	0f 92       	push	r0
 9de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 9ea:	0f 92       	push	r0
 9ec:	2f 93       	push	r18
 9ee:	3f 93       	push	r19
 9f0:	4f 93       	push	r20
 9f2:	5f 93       	push	r21
 9f4:	6f 93       	push	r22
 9f6:	7f 93       	push	r23
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	af 93       	push	r26
 9fe:	bf 93       	push	r27
 a00:	ef 93       	push	r30
 a02:	ff 93       	push	r31
 a04:	cf 93       	push	r28
 a06:	df 93       	push	r29
 a08:	cd b7       	in	r28, 0x3d	; 61
 a0a:	de b7       	in	r29, 0x3e	; 62
 a0c:	f8 94       	cli
 a0e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 a12:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 a16:	85 35       	cpi	r24, 0x55	; 85
 a18:	93 40       	sbci	r25, 0x03	; 3
 a1a:	20 f0       	brcs	.+8      	; 0xa24 <__vector_9+0x4a>
 a1c:	8f e1       	ldi	r24, 0x1F	; 31
 a1e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 a22:	2e c0       	rjmp	.+92     	; 0xa80 <__vector_9+0xa6>
 a24:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 a28:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 a2c:	8b 3a       	cpi	r24, 0xAB	; 171
 a2e:	92 40       	sbci	r25, 0x02	; 2
 a30:	20 f0       	brcs	.+8      	; 0xa3a <__vector_9+0x60>
 a32:	8f e0       	ldi	r24, 0x0F	; 15
 a34:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 a38:	23 c0       	rjmp	.+70     	; 0xa80 <__vector_9+0xa6>
 a3a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 a3e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 a42:	81 15       	cp	r24, r1
 a44:	92 40       	sbci	r25, 0x02	; 2
 a46:	20 f0       	brcs	.+8      	; 0xa50 <__vector_9+0x76>
 a48:	87 e0       	ldi	r24, 0x07	; 7
 a4a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 a4e:	18 c0       	rjmp	.+48     	; 0xa80 <__vector_9+0xa6>
 a50:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 a54:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 a58:	86 35       	cpi	r24, 0x56	; 86
 a5a:	91 40       	sbci	r25, 0x01	; 1
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__vector_9+0x8c>
 a5e:	83 e0       	ldi	r24, 0x03	; 3
 a60:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 a64:	0d c0       	rjmp	.+26     	; 0xa80 <__vector_9+0xa6>
 a66:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 a6a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 a6e:	8b 3a       	cpi	r24, 0xAB	; 171
 a70:	91 05       	cpc	r25, r1
 a72:	20 f0       	brcs	.+8      	; 0xa7c <__vector_9+0xa2>
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <LEDpattern>
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <__vector_9+0xa6>
 a7c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <LEDpattern>
 a80:	78 94       	sei
 a82:	b2 de       	rcall	.-668    	; 0x7e8 <flashLEDs>
 a84:	00 00       	nop
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	ff 91       	pop	r31
 a8c:	ef 91       	pop	r30
 a8e:	bf 91       	pop	r27
 a90:	af 91       	pop	r26
 a92:	9f 91       	pop	r25
 a94:	8f 91       	pop	r24
 a96:	7f 91       	pop	r23
 a98:	6f 91       	pop	r22
 a9a:	5f 91       	pop	r21
 a9c:	4f 91       	pop	r20
 a9e:	3f 91       	pop	r19
 aa0:	2f 91       	pop	r18
 aa2:	0f 90       	pop	r0
 aa4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 aa8:	0f 90       	pop	r0
 aaa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 aae:	0f 90       	pop	r0
 ab0:	1f 90       	pop	r1
 ab2:	18 95       	reti

00000ab4 <__vector_25>:
 ab4:	1f 92       	push	r1
 ab6:	0f 92       	push	r0
 ab8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 abc:	0f 92       	push	r0
 abe:	11 24       	eor	r1, r1
 ac0:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 ac4:	0f 92       	push	r0
 ac6:	2f 93       	push	r18
 ac8:	3f 93       	push	r19
 aca:	8f 93       	push	r24
 acc:	9f 93       	push	r25
 ace:	ef 93       	push	r30
 ad0:	ff 93       	push	r31
 ad2:	cf 93       	push	r28
 ad4:	df 93       	push	r29
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
 ada:	88 e7       	ldi	r24, 0x78	; 120
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	fc 01       	movw	r30, r24
 ae0:	80 81       	ld	r24, Z
 ae2:	88 2f       	mov	r24, r24
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <adc_value+0x1>
 aea:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_value>
 aee:	89 e7       	ldi	r24, 0x79	; 121
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	fc 01       	movw	r30, r24
 af4:	80 81       	ld	r24, Z
 af6:	88 2f       	mov	r24, r24
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	98 2f       	mov	r25, r24
 afc:	88 27       	eor	r24, r24
 afe:	9c 01       	movw	r18, r24
 b00:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <adc_value>
 b04:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <adc_value+0x1>
 b08:	82 0f       	add	r24, r18
 b0a:	93 1f       	adc	r25, r19
 b0c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <adc_value+0x1>
 b10:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <adc_value>
 b14:	00 00       	nop
 b16:	df 91       	pop	r29
 b18:	cf 91       	pop	r28
 b1a:	ff 91       	pop	r31
 b1c:	ef 91       	pop	r30
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	3f 91       	pop	r19
 b24:	2f 91       	pop	r18
 b26:	0f 90       	pop	r0
 b28:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 b2c:	0f 90       	pop	r0
 b2e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <strlen>:
 b38:	fc 01       	movw	r30, r24
 b3a:	01 90       	ld	r0, Z+
 b3c:	00 20       	and	r0, r0
 b3e:	e9 f7       	brne	.-6      	; 0xb3a <strlen+0x2>
 b40:	80 95       	com	r24
 b42:	90 95       	com	r25
 b44:	8e 0f       	add	r24, r30
 b46:	9f 1f       	adc	r25, r31
 b48:	08 95       	ret

00000b4a <itoa>:
 b4a:	45 32       	cpi	r20, 0x25	; 37
 b4c:	51 05       	cpc	r21, r1
 b4e:	18 f4       	brcc	.+6      	; 0xb56 <itoa+0xc>
 b50:	42 30       	cpi	r20, 0x02	; 2
 b52:	08 f0       	brcs	.+2      	; 0xb56 <itoa+0xc>
 b54:	04 c0       	rjmp	.+8      	; 0xb5e <__itoa_ncheck>
 b56:	fb 01       	movw	r30, r22
 b58:	10 82       	st	Z, r1
 b5a:	cb 01       	movw	r24, r22
 b5c:	08 95       	ret

00000b5e <__itoa_ncheck>:
 b5e:	bb 27       	eor	r27, r27
 b60:	4a 30       	cpi	r20, 0x0A	; 10
 b62:	31 f4       	brne	.+12     	; 0xb70 <__itoa_ncheck+0x12>
 b64:	99 23       	and	r25, r25
 b66:	22 f4       	brpl	.+8      	; 0xb70 <__itoa_ncheck+0x12>
 b68:	bd e2       	ldi	r27, 0x2D	; 45
 b6a:	90 95       	com	r25
 b6c:	81 95       	neg	r24
 b6e:	9f 4f       	sbci	r25, 0xFF	; 255
 b70:	01 c0       	rjmp	.+2      	; 0xb74 <__utoa_common>

00000b72 <__utoa_ncheck>:
 b72:	bb 27       	eor	r27, r27

00000b74 <__utoa_common>:
 b74:	fb 01       	movw	r30, r22
 b76:	55 27       	eor	r21, r21
 b78:	aa 27       	eor	r26, r26
 b7a:	88 0f       	add	r24, r24
 b7c:	99 1f       	adc	r25, r25
 b7e:	aa 1f       	adc	r26, r26
 b80:	a4 17       	cp	r26, r20
 b82:	10 f0       	brcs	.+4      	; 0xb88 <__utoa_common+0x14>
 b84:	a4 1b       	sub	r26, r20
 b86:	83 95       	inc	r24
 b88:	50 51       	subi	r21, 0x10	; 16
 b8a:	b9 f7       	brne	.-18     	; 0xb7a <__utoa_common+0x6>
 b8c:	a0 5d       	subi	r26, 0xD0	; 208
 b8e:	aa 33       	cpi	r26, 0x3A	; 58
 b90:	08 f0       	brcs	.+2      	; 0xb94 <__utoa_common+0x20>
 b92:	a9 5d       	subi	r26, 0xD9	; 217
 b94:	a1 93       	st	Z+, r26
 b96:	00 97       	sbiw	r24, 0x00	; 0
 b98:	79 f7       	brne	.-34     	; 0xb78 <__utoa_common+0x4>
 b9a:	b1 11       	cpse	r27, r1
 b9c:	b1 93       	st	Z+, r27
 b9e:	11 92       	st	Z+, r1
 ba0:	cb 01       	movw	r24, r22
 ba2:	00 c0       	rjmp	.+0      	; 0xba4 <strrev>

00000ba4 <strrev>:
 ba4:	dc 01       	movw	r26, r24
 ba6:	fc 01       	movw	r30, r24
 ba8:	67 2f       	mov	r22, r23
 baa:	71 91       	ld	r23, Z+
 bac:	77 23       	and	r23, r23
 bae:	e1 f7       	brne	.-8      	; 0xba8 <strrev+0x4>
 bb0:	32 97       	sbiw	r30, 0x02	; 2
 bb2:	04 c0       	rjmp	.+8      	; 0xbbc <strrev+0x18>
 bb4:	7c 91       	ld	r23, X
 bb6:	6d 93       	st	X+, r22
 bb8:	70 83       	st	Z, r23
 bba:	62 91       	ld	r22, -Z
 bbc:	ae 17       	cp	r26, r30
 bbe:	bf 07       	cpc	r27, r31
 bc0:	c8 f3       	brcs	.-14     	; 0xbb4 <strrev+0x10>
 bc2:	08 95       	ret

00000bc4 <_exit>:
 bc4:	f8 94       	cli

00000bc6 <__stop_program>:
 bc6:	ff cf       	rjmp	.-2      	; 0xbc6 <__stop_program>
