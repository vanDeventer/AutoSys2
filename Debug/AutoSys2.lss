
AutoSys2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000010d  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ae  00000000  00000000  0000048d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000192  00000000  00000000  0000053b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000006d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000176  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000a3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
   6:	00 00       	nop
   8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f7 c0       	rjmp	.+494    	; 0x20c <__vector_7>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	35 c0       	rjmp	.+106    	; 0xb4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
  66:	00 00       	nop
  68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
  72:	00 00       	nop
  74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
  76:	00 00       	nop
  78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	19 c0       	rjmp	.+50     	; 0xb4 <__bad_interrupt>
  82:	00 00       	nop
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__bad_interrupt>
  86:	00 00       	nop
  88:	15 c0       	rjmp	.+42     	; 0xb4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	13 c0       	rjmp	.+38     	; 0xb4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	11 c0       	rjmp	.+34     	; 0xb4 <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_clear_bss>:
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a2 30       	cpi	r26, 0x02	; 2
  ac:	b2 07       	cpc	r27, r18
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	3d d0       	rcall	.+122    	; 0x12c <main>
  b2:	d5 c0       	rjmp	.+426    	; 0x25e <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <initGPIO>:
volatile unsigned char buttons;		// This registers holds a copy of PINC when an external interrupt 6 has occurred.
volatile unsigned char bToggle = 0;	// This registers is a boolean that is set when an interrupt 6 occurs and cleared when serviced in the code.
//These registers is available outside of the main loop (i.e., to the interrupt handlers)

int initGPIO(void)
{
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	//Set up input output direction on Port C and G
	DDRB |= (1<<DB_LED);	// Set the display backlight's IO pin an an output. Leave other bits as they were.
  be:	84 e2       	ldi	r24, 0x24	; 36
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	24 e2       	ldi	r18, 0x24	; 36
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	20 68       	ori	r18, 0x80	; 128
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
	DDRC = 0b00000111;		// Set the direction of the IO pins on Port C to output on the 3 least significant bits and input on the 5 higher ones. 5 buttons and 3 LEDs.
  d0:	87 e2       	ldi	r24, 0x27	; 39
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	27 e0       	ldi	r18, 0x07	; 7
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
	DDRG |= 0b00000011;		// set the direction of the IO pins on Port G's lower 2 bytes as output (LEDs 1 & 2). Leave the other bits as they were.
  da:	83 e3       	ldi	r24, 0x33	; 51
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	23 e3       	ldi	r18, 0x33	; 51
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	20 81       	ld	r18, Z
  e6:	23 60       	ori	r18, 0x03	; 3
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	return(0);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <iniExtInt>:

int iniExtInt(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	//Set up external Interrupts
	// The five Switches are ORed to Pin PE6 which is alternatively Int6
	EICRB |= (0<<ISC61) | (1<<ISC60);  //Any logical change to INT6 generates an interrupt
  fe:	8a e6       	ldi	r24, 0x6A	; 106
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2a e6       	ldi	r18, 0x6A	; 106
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	20 61       	ori	r18, 0x10	; 16
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	EIMSK |= (1<<INTF6);
 110:	8d e3       	ldi	r24, 0x3D	; 61
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2d e3       	ldi	r18, 0x3D	; 61
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	20 64       	ori	r18, 0x40	; 64
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	return(6);
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	90 e0       	ldi	r25, 0x00	; 0
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <main>:




int main(void)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	1f 92       	push	r1
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
	unsigned char temp = 0x0F;		// Allocate memory for temp. It is initialized to 15 for demonstration purposes only.
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	89 83       	std	Y+1, r24	; 0x01
	
	temp = initGPIO();				// Set up the data direction register for both ports C and G
 13a:	bd df       	rcall	.-134    	; 0xb6 <initGPIO>
 13c:	89 83       	std	Y+1, r24	; 0x01
	temp = iniExtInt();				// Setup external interrupts
 13e:	db df       	rcall	.-74     	; 0xf6 <iniExtInt>
 140:	89 83       	std	Y+1, r24	; 0x01
	sei();					// Set Global Interrupts
 142:	78 94       	sei
	
	while(1)
	{
		if (bToggle)
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	88 23       	and	r24, r24
 14a:	09 f4       	brne	.+2      	; 0x14e <main+0x22>
 14c:	5e c0       	rjmp	.+188    	; 0x20a <main+0xde>
		{
			switch(buttons & 0b11111000)
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <buttons>
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	88 7f       	andi	r24, 0xF8	; 248
 158:	99 27       	eor	r25, r25
 15a:	80 32       	cpi	r24, 0x20	; 32
 15c:	91 05       	cpc	r25, r1
 15e:	19 f1       	breq	.+70     	; 0x1a6 <main+0x7a>
 160:	81 32       	cpi	r24, 0x21	; 33
 162:	91 05       	cpc	r25, r1
 164:	34 f4       	brge	.+12     	; 0x172 <main+0x46>
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	91 05       	cpc	r25, r1
 16a:	89 f1       	breq	.+98     	; 0x1ce <main+0xa2>
 16c:	40 97       	sbiw	r24, 0x10	; 16
 16e:	29 f1       	breq	.+74     	; 0x1ba <main+0x8e>
 170:	38 c0       	rjmp	.+112    	; 0x1e2 <main+0xb6>
 172:	80 34       	cpi	r24, 0x40	; 64
 174:	91 05       	cpc	r25, r1
 176:	69 f0       	breq	.+26     	; 0x192 <main+0x66>
 178:	80 38       	cpi	r24, 0x80	; 128
 17a:	91 05       	cpc	r25, r1
 17c:	91 f5       	brne	.+100    	; 0x1e2 <main+0xb6>
			{
				case 0b10000000:			//S5 center button
					PORTC |= 0b00000100;	//Turn on Led5 if S5 is on
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	28 e2       	ldi	r18, 0x28	; 40
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	f9 01       	movw	r30, r18
 188:	20 81       	ld	r18, Z
 18a:	24 60       	ori	r18, 0x04	; 4
 18c:	fc 01       	movw	r30, r24
 18e:	20 83       	st	Z, r18
					break;
 190:	3a c0       	rjmp	.+116    	; 0x206 <main+0xda>
				case 0b01000000:			//S4  upper button
					PORTC |= 0b00000010;	 //Turn on Led4 if S4 is on
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	28 e2       	ldi	r18, 0x28	; 40
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	20 81       	ld	r18, Z
 19e:	22 60       	ori	r18, 0x02	; 2
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
					break;
 1a4:	30 c0       	rjmp	.+96     	; 0x206 <main+0xda>
				case 0b00100000:			//S3 left button
					PORTC |= 0b00000001;	//Turn on Led3 if S3 is on
 1a6:	88 e2       	ldi	r24, 0x28	; 40
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	28 e2       	ldi	r18, 0x28	; 40
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	21 60       	ori	r18, 0x01	; 1
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
					break;
 1b8:	26 c0       	rjmp	.+76     	; 0x206 <main+0xda>
				case 0b00010000:			//S2 lower button
					PORTG |= 0b00000010;	//Turn on Led2 if S2 is on
 1ba:	84 e3       	ldi	r24, 0x34	; 52
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	24 e3       	ldi	r18, 0x34	; 52
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	f9 01       	movw	r30, r18
 1c4:	20 81       	ld	r18, Z
 1c6:	22 60       	ori	r18, 0x02	; 2
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
					break;
 1cc:	1c c0       	rjmp	.+56     	; 0x206 <main+0xda>
				case 0b00001000:			//S1 right button
					PORTG |= 0b00000001;	//Turn on Led1 if S1 is on
 1ce:	84 e3       	ldi	r24, 0x34	; 52
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	24 e3       	ldi	r18, 0x34	; 52
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	21 60       	ori	r18, 0x01	; 1
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
					break;
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <main+0xda>
				default:
					PORTC &= 0b11111000;	//Turn off Port C LEDs
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	28 e2       	ldi	r18, 0x28	; 40
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	f9 01       	movw	r30, r18
 1ec:	20 81       	ld	r18, Z
 1ee:	28 7f       	andi	r18, 0xF8	; 248
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
					PORTG &= 0x11111100;	//Turn off Port G LEDs
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	fc 01       	movw	r30, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	84 e3       	ldi	r24, 0x34	; 52
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	10 82       	st	Z, r1
				break;
 204:	00 00       	nop
			}
		bToggle = 0;
 206:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}			
// NOTE: THE ABOVE LOGIC ALLOWS YOU TO HAVE ONLY 1 LED ON AT THE TIME. This would be the case if you had a joystick.			

	}
 20a:	9c cf       	rjmp	.-200    	; 0x144 <main+0x18>

0000020c <__vector_7>:
}

SIGNAL(SIG_INTERRUPT6)  //Execute the following code if an INT6 interrupt has been generated. It is kept short.
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 21c:	0f 92       	push	r0
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	bToggle = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	buttons = PINC;
 234:	86 e2       	ldi	r24, 0x26	; 38
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buttons>
}
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 252:	0f 90       	pop	r0
 254:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
